# file นี้ ผมให้ chat gen คำอธิบาย เป็น En Th

# Server block แรก: จัดการ backend (PHP-FPM) ที่ port 80
# First server block: Handles backend (PHP-FPM) on port 80
server {
    # ฟังคำขอที่ port 80 ภายใน container (map เป็น 8080 บน host ผ่าน docker-compose)
    # Listens to port 80 inside the container (mapped to 8080 on host via docker-compose)
    listen 80;

    # กำหนดไฟล์เริ่มต้นเมื่อเข้าถึง root URL (เช่น index.php)
    # Sets the default file to serve when accessing the root URL (e.g., index.php)
    index index.php;

    # ตั้งชื่อ server เป็น localhost (ใช้ใน Docker environment)
    # Sets the server name to localhost (used in Docker environment)
    server_name localhost;

    # ตั้ง root directory เป็น /var/www/public ซึ่งต้องมีโฟลเดอร์ public ใน backend
    # Sets the root directory to /var/www/public, which must exist in the backend volume
    root /var/www/public;

    # จัดการคำขอที่เข้ามาที่ root URL (/)
    # Handles requests coming to the root URL (/)
    location / {
        # ลองหาไฟล์หรือโฟลเดอร์ตาม $uri หรือ $uri/ ถ้าไม่พบ ส่งไปที่ index.php
        # Tries to find a file or directory at $uri or $uri/, if not found, forwards to index.php
        try_files $uri $uri/ /index.php$is_args$args;
    }

    # จัดการคำขอที่เข้ามาที่ /index.php หรือ path ใดๆ หลัง /index.php
    # Handles requests to /index.php or any path following /index.php
    location ~ ^/index\.php(/|$) {
        # ส่งคำขอไปยัง backend service (PHP-FPM) ที่ port 9000 (ชื่อ service จาก docker-compose)
        # Forwards request to the backend service (PHP-FPM) on port 9000 (service name from docker-compose)
        fastcgi_pass backend:9000;

        # แยก path info ออกจาก script name (เช่น /index.php/path/to/something)
        # Splits path info from script name (e.g., /index.php/path/to/something)
        fastcgi_split_path_info ^(.+\.php)(/.*)$;

        # รวมไฟล์พารามิเตอร์พื้นฐานของ FastCGI ที่มากับ Nginx
        # Includes default FastCGI parameters provided by Nginx
        include fastcgi_params;

        # ตั้งค่า SCRIPT_FILENAME ให้ชี้ไปยังไฟล์ PHP จริงใน filesystem
        # Sets SCRIPT_FILENAME to point to the actual PHP file in the filesystem
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;

        # ตั้งค่า DOCUMENT_ROOT ให้ PHP รู้ว่า root directory อยู่ที่ไหน
        # Sets DOCUMENT_ROOT so PHP knows where the root directory is
        fastcgi_param DOCUMENT_ROOT $realpath_root;

        # ส่ง Content-Type จาก request เดิมไปให้ PHP เพื่อให้รู้ประเภทข้อมูล
        # Passes the original request's Content-Type to PHP to identify data type
        fastcgi_param CONTENT_TYPE $content_type;

        # ส่ง Content-Length จาก request เดิมไปให้ PHP เพื่อให้รู้ขนาดข้อมูล
        # Passes the original request's Content-Length to PHP to identify data size
        fastcgi_param CONTENT_LENGTH $content_length;

        # จำกัดให้ block นี้เข้าถึงได้จากภายใน Nginx เท่านั้น (ป้องกันการเรียกจากภายนอก)
        # Restricts this block to internal Nginx access only (prevents external calls)
        internal;
    }

    # ป้องกันการเรียกไฟล์ PHP อื่นๆ ที่ไม่ใช่ index.php
    # Prevents access to other PHP files besides index.php
    location ~ \.php$ {
        # ส่งกลับ 404 หากพยายามเรียกไฟล์ PHP อื่น (เช่น /test.php)
        # Returns 404 if someone tries to access other PHP files (e.g., /test.php)
        return 404;
    }
}

# Server block ที่สอง: จัดการ frontend ที่ port 5173
# Second server block: Handles frontend on port 5173
server {
    # ฟังคำขอที่ port 5173 ภายใน container (map เป็น 5173 บน host ผ่าน docker-compose)
    # Listens to port 5173 inside the container (mapped to 5173 on host via docker-compose)
    listen 5173;

    # ตั้งชื่อ server เป็น localhost (ใช้ใน Docker environment)
    # Sets the server name to localhost (used in Docker environment)
    server_name localhost;

    # จัดการคำขอทั้งหมดที่เข้ามาที่ port 5173
    # Handles all requests coming to port 5173
    location / {
        # ส่งคำขอไปยัง frontend service ที่ port 5173 ใน Docker network
        # Forwards requests to the frontend service on port 5173 in the Docker network
        proxy_pass http://frontend:5173;

        # ใช้ HTTP version 1.1 เพื่อรองรับ WebSocket ถ้า frontend ต้องการ
        # Uses HTTP version 1.1 to support WebSocket if required by the frontend
        proxy_http_version 1.1;

        # รองรับการ upgrade connection เช่น WebSocket ถ้า frontend ใช้
        # Supports connection upgrades (e.g., WebSocket) if used by the frontend
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # ส่ง header Host เดิมไปให้ frontend รู้ว่า request มาจากไหน
        # Passes the original Host header so the frontend knows where the request came from
        proxy_set_header Host $host;

        # ส่ง IP จริงของ client ไปให้ frontend
        # Passes the real client IP to the frontend
        proxy_set_header X-Real-IP $remote_addr;

        # ส่งข้อมูล proxy chain หากมี proxy อื่นอยู่หน้าก่อนหน้า
        # Passes proxy chain info if there’s another proxy in front
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # บอก frontend ว่าใช้ protocol อะไร (เช่น http หรือ https)
        # Tells the frontend which protocol is used (e.g., http or https)
        proxy_set_header X-Forwarded-Proto $scheme;

        # Bypass cache ถ้ามีการ upgrade connection (เช่น WebSocket)
        # Bypasses cache if there’s a connection upgrade (e.g., WebSocket)
        proxy_cache_bypass $http_upgrade;
    }
}